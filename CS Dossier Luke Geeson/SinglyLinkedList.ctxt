#BlueJ class context
comment0.params=firstNode\ nextNode
comment0.target=SinglyLinkedList(Node,\ Node)
comment0.text=\r\n\ this\ constructor\ is\ used\ when\ a\ new\ linked\ list\ is\ created\ and\ you\ want\ to\ pass\ the\ first\ node\ \r\n\ of\ the\ list\ to\ it.\ If\ there\ is\ only\ one\ Node\ passed\ then\ pass\ null\ as\ the\ nextNode\ parameter\r\n\ \r\n\ @param\ firstNode\ \ \ \ \ \ \ \ \ the\ first\ node\ in\ the\ linked\ list,\ set\ as\ the\ head\ of\ the\ list\r\n\ @param\ nextNode\ \ \ \ \ \ \ \ \ \ the\ next\ node\ after\ the\ first,\ pass\ as\ null\ if\ there\ are\ no\ other\ nodes\r\n
comment1.params=
comment1.target=SinglyLinkedList()
comment1.text=\r\n\ this\ is\ the\ default\ constructor\r\n
comment10.params=input
comment10.target=void\ printReverseList(Node)
comment10.text=\r\n\ prints\ the\ linked\ list\ in\ descending\ order\ \ to\ the\ node\ which\ is\ input\r\n\ \r\n\ @param\ input\ \ \ \ \ \ \ \ \ \ \ \ \ prints\ all\ items\ from\ this\ point\ onward\ in\ descending\ order\r\n
comment11.params=input
comment11.target=void\ printList(Node)
comment11.text=\r\n\ prints\ the\ entire\ linked\ list\ in\ ascending\ order\ from\ the\ node\ input\ -\ will\ print\ from\ any\ node\r\n\ in\ the\ list\ to\ the\ end\ of\ the\ list\ but\ to\ print\ the\ whole\ list\ -\ pass\ the\ head\ node\r\n\ \r\n\ @param\ input\ \ \ \ \ \ \ \ \ \ \ \ \ the\ node\ from\ which\ you\ print\r\n
comment12.params=input
comment12.target=void\ setHead(Node)
comment12.text=\r\n\ assignes\ the\ value\ input\ to\ the\ "head"\ variable\ and\ sets\ as\ the\ head\ of\ the\ list\r\n\ \r\n\ @param\ input\ \ \ \ \ \ \ \ \ \ \ \ \ a\ Node\ which\ will\ be\ set\ as\ the\ head\r\n
comment13.params=
comment13.target=Node\ getHead()
comment13.text=\r\n\ returns\ the\ value\ assigned\ to\ variable\ "head"\ effectively\ setting\ the\ head\r\n\ and\ adding\ a\ node\ to\ the\ list\r\n\ \r\n\ @return\ head\ \ \ \ \ \ \ \ \ \ \ \ \ the\ head\ of\ the\ list\r\n
comment14.params=elementOfList\ input
comment14.target=void\ appendLast(Node,\ Node)
comment14.text=\r\n\ adds\ a\ node\ to\ the\ end\ of\ the\ list\r\n\ \r\n\ @param\ input\ \ \ \ \ \ \ \ \ \ \ \ \ a\ node\ which\ will\ be\ set\ as\ the\ last\ item\ in\ the\ list\r\n\ @param\ elementOfList\ \ \ \ \ a\ node\ which\ will\ be\ used\ to\ cycle\ through\ the\ list\ and\ append\ the\ input\ node\ to\ the\ end\r\n
comment15.params=elementOfList
comment15.target=Node\ getLast(Node)
comment15.text=\r\n\ returns\ the\ value\ assigned\ to\ the\ last\ item\ in\ the\ list\r\n\ \r\n\ @param\ elementOfList\ \ \ \ \ used\ to\ cycle\ through\ the\ list\ and\ reach\ the\ end\ of\ the\ list\r\n\ @return\ elementOfList\ \ \ \ returned\ as\ the\ last\ item\ in\ the\ list\r\n
comment16.params=
comment16.target=Node[]\ toArray()
comment16.text=\r\n\ converts\ the\ Linked\ List\ to\ a\ data\ array\ so\ that\ the\ data\ contained\ in\ an\ array\ will\ itself\ be\ an\ array\r\n\ -\ no\ paramters\ \r\n\ \r\n\ @return\ dataArray\ \ \ \ \ \ \ \ an\ object\ array\ that\ will\ contain\ the\ data\ within\ each\ node\ of\ the\ linked\ list\r\n
comment2.params=
comment2.target=boolean\ isEmpty()
comment2.text=\r\n\ returns\ a\ boolean\ value\ dependent\ on\ whether\ the\ Linked\ List\ is\ empty\ -\ no\ parameters\r\n\ \r\n\ @return\ empty\ \ \ \ \ \ \ \ \ \ \ \ will\ determine\ whether\ it\ is\ empty\ -\ 'true'\ \=\ the\ list\ is\ empty\r\n
comment3.params=input
comment3.target=int\ length(Node)
comment3.text=\r\n\ returns\ the\ size\ of\ the\ list\r\n\ \r\n\ @param\ input\ \ \ \ \ \ \ \ \ \ \ \ \ calculates\ the\ size\ of\ the\ list\ with\ this\ variable\ -\ pass\ head\ node\r\n\ \r\n\ @return\ int\ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ size\ of\ the\ list\ (null\ if\ empty)\r\n
comment4.params=newData\ trailNode
comment4.target=void\ addRecord(Node,\ Node)
comment4.text=\r\n\ inserts\ a\ Node\ in\ the\ list,\ in\ order\ according\ to\ the\ Surname\ is\ void\ as\ it\ does\ not\ return\ anything\r\n\ \r\n\ @param\ newData\ \ \ \ \ \ \ \ \ \ \ the\ new\ Node\ which\ contains\ the\ new\ data\ to\ be\ inserted\ \r\n\ @param\ trailNode\ \ \ \ \ \ \ \ \ the\ node\ which\ the\ new\ data\ will\ compare\ with\r\n
comment5.params=compNode\ search
comment5.target=Node\ searchList(Node,\ java.lang.String)
comment5.text=\r\n\ this\ method\ searches\ for\ the\ first\ occurance\ of\ the\ Node\ with\ an\ identical\ key\ String\ to\ "search"\r\n\ \r\n\ @param\ compNode\ \ \ \ \ \ \ \ \ \ the\ node\ which\ will\ be\ compared\ with\ the\ search\ string\r\n\ @param\ search\ \ \ \ \ \ \ \ \ \ \ \ the\ string\ which\ that\ is\ sought\ after\r\n\ \r\n\ @return\ compNode\ or\ null\ this\ will\ return\ the\ first\ occurance\ of\ the\ Node\ containing\ the\ search\ String\ null\ if\ no\ such\ node\ is\ found\r\n
comment6.params=toRemove\ compNode
comment6.target=void\ removeNode(Node,\ Node)
comment6.text=\r\n\ this\ method\ will\ take\ a\ Node\ from\ the\ parameter\ and\ remove\ the\ first\ occurance\ of\ it\ in\ the\ singly\r\n\ linked\ list.\ it\ is\ void\ \ and\ takes\ 2\ parameters\:\r\n\ \r\n\ @param\ toRemove\ \ \ \ \ \ \ \ \ \ the\ node\ which\ needs\ to\ be\ removed\r\n\ @param\ compNode\ \ \ \ \ \ \ \ \ \ the\ node\ with\ which\ the\ 'toRemove'\ node\ will\ be\ compared\ -\ allows\ recursive\ traversal\r\n
comment7.params=nodeToChange\ changeDecision\ changeInput
comment7.target=Node\ changeNode(Node,\ java.lang.String,\ java.lang.String)
comment7.text=\r\n\ this\ method\ will\ take\ a\ node\ and\ change\ the\ specific\ details\ of\ it\ \ based\ on\ the\ data\ supplied\r\n\ NOTE\:\ this\ method\ alters\ DATA\ of\ the\ node\ -\ use\ get/set\ data\ methods\ to\ alter\ the\ node\ itself\r\n\ \r\n\ @param\ nodeToChange\ \ \ \ \ \ the\ node\ which\ will\ be\ altered\r\n\ @param\ changeDecision\ \ \ \ the\ decision\ of\ which\ variable\ is\ to\ be\ altered\r\n\ @param\ changeInput\ \ \ \ \ \ \ the\ new\ information\ that\ will\ replace\ the\ old\r\n\ \r\n\ @return\ nodeToChange\ \ \ \ \ the\ old\ node\ is\ return\ with\ the\ changes\r\n
comment8.params=
comment8.target=void\ sortList()
comment8.text=\r\n\ this\ method\ performs\ a\ bubble\ sort\ on\ the\ linked\ list\ and\ sorts\ the\ data\ in\ ascending\ order\r\n\ performs\ a\ sort\ on\ the\ list\ associated\ and\ returns\ nothing\r\n
comment9.params=lst1\ lst2
comment9.target=SinglyLinkedList\ mergeLists(SinglyLinkedList,\ SinglyLinkedList)
comment9.text=\r\n\ this\ method\ will\ take\ two\ singly\ linked\ list\ objects\ as\ parameters\ and\ merge\ them\ -\ it\ has\ 4\ \r\n\ possible\ ways\ of\ working\ 1.if\ both\ are\ empty\ 2.one\ is\ full\ and\ the\ other\ is\ not,\ 3.\ vice\ versa\r\n\ or\ 4.both\ are\ full.\r\n\ \r\n\ @param\ lst1\ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ first\ list\r\n\ @param\ lst2\ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ second\ list\r\n\ \r\n\ @return\ newList\ \ \ \ \ \ \ \ \ \ returns\ a\ new\ list\ with\ the\ 2\ lists\ merged\r\n
numComments=17
